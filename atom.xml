<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xky5308222.github.io</id>
    <title>XKY&apos;s Home</title>
    <updated>2020-03-11T12:11:44.220Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xky5308222.github.io"/>
    <link rel="self" href="https://xky5308222.github.io/atom.xml"/>
    <subtitle>不负韶华
       我们都是追梦人</subtitle>
    <logo>https://xky5308222.github.io/images/avatar.png</logo>
    <icon>https://xky5308222.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, XKY&apos;s Home</rights>
    <entry>
        <title type="html"><![CDATA[LCS Template]]></title>
        <id>https://xky5308222.github.io/post/lcs-template/</id>
        <link href="https://xky5308222.github.io/post/lcs-template/">
        </link>
        <updated>2020-03-11T12:02:46.000Z</updated>
        <content type="html"><![CDATA[<p>首先，我们建立一个类似于map的映射关系<code>q[a[i]]=i</code>,接下去让ta在另一个序列当中体现出来。</p>
<p>这样本体就转化为一个求<code>q[b[i]]</code>的LIS的问题了。</p>
<h2 id="如何使用二分搜索">如何使用二分搜索？</h2>
<p>（注意，以下内容转载自 @I_AM_HelloWord 的Luogu题解）<br>
考虑一个数列5 2 3 1 4</p>
<p>首先，把5加入答案序列中，然后加2，发现2&lt;5所以显然2替换5不会使结果更差，</p>
<p>那么答案序列就是{2},然后加3，发现3&gt;2，所以直接把3加到答案序列中：{2,3}</p>
<p>然后加1，我们发现1&lt;3，于是我们找到一个最小的但是比1大的数字2，然后把1替换2，为什么这么做不会影响结果呢？你可以这么想，我们当前已经求出了一个当前最优的序列，如果我们用1替换2，然后后面来一个数字替换了3，那么我们就可以得到一个更优的序列，而如果没有数字替换3，那么这个1替换2也就是没有贡献的，不会影响我们结果的最优性。至于，如何找到一个最小的但是大于某个数字的数字，弄个二分查找就行了，因为我们的答案序列是有序的呀。</p>
<h2 id="code"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Code</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span></span></span></span></h2>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;

int a[100010],b[100010],q[100010],f[100010];

int main()
{
	int n,ans=0;
	scanf(&quot;%d&quot;,&amp;n);
	for(int i=1;i&lt;=n;i++){
		scanf(&quot;%d&quot;,&amp;a[i]);
		q[a[i]]=i;//映射
	}
	for(int i=1;i&lt;=n;i++)
		scanf(&quot;%d&quot;,&amp;b[i]);
	for(int i=1;i&lt;=n;i++){
		int x=q[b[i]];
		if (x&gt;f[ans]) ans++,f[ans]=x;//如果大于当前答案序列的最后一个数，就直接加入。
		else{
			int l=0,r=ans,k=-1;
			while(l&lt;=r){
				int mid=(l+r)&gt;&gt;1;
				if (x&lt;f[mid]) k=mid,r=mid-1;
				else l=mid+1;
			}//否则二分查找比当前的数大的最小数，更新答案。
			if (x&lt;f[k]) f[k]=x;
		}
	}
	printf(&quot;%d\n&quot;,ans);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P6189 【[NOI Online 入门组]跑步】]]></title>
        <id>https://xky5308222.github.io/post/ti-jie-p6189-noi-online-ru-men-zu-pao-bu/</id>
        <link href="https://xky5308222.github.io/post/ti-jie-p6189-noi-online-ru-men-zu-pao-bu/">
        </link>
        <updated>2020-03-11T12:00:21.000Z</updated>
        <content type="html"><![CDATA[<p>话说现在连<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">pj</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>都考这么变态的数学题了吗……</p>
<h4 id="回归正题">回归正题</h4>
<p>看到这道题目，相信大家就一定想到了一个初赛中经常遇到的模型：</p>
<p>有 $ n $ 个完全相同的盒子和 $ n $个完全相同的小球，允许盒子为空，求有多少种不同的放法？</p>
<p>其实这道题本质上和上面的问题是完全相同的。</p>
<p>初赛的时候数据小手推就可以了，但是现在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding="application/x-tex">1≤n≤10 
^5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span></span><br>
，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>≤</mo><mi>p</mi><mo>&lt;</mo><msup><mn>2</mn><mn>30</mn></msup></mrow><annotation encoding="application/x-tex">1 \leq p &lt; 2^{30}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span>，显然<s>dabiao</s>是不现实的。</p>
<p>那么应该如何解呢？</p>
<h3 id="大家要注意的是这是一场online测试">大家要注意的是！这是一场Online测试。</h3>
<h3 id="所以我们要充分地利用网络">所以，我们要充分地利用网络。</h3>
<p>我们可以先尝试着推前几个.</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">n=1,ans=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>//(1)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>2</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">n=2,ans=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>//(2,0),(1,1)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>3</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">n=3,ans=3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>//(3,0,0),(2,1,0),(1,1,1)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>4</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mn>5</mn></mrow><annotation encoding="application/x-tex">n=4,ans=5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">4</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span></span></span></span>//(4,0,0,0),(3,1,0,0)(2,2,0,0)(2,1,1,0)(1,1,1,1)</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo>=</mo><mn>7</mn></mrow><annotation encoding="application/x-tex">n=5,ans=7</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">n</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">7</span></span></span></span>//太长了，请dalao们自己去推算吧</p>
<p><s>众所周知，</s>，有一个非常神奇的网站叫做<a href="http://oeis.org/">OEIS</a>。</p>
<p>将我们刚才找到的规律1,2,3,5,7输入，很快得到一个数列<a href="http://oeis.org/search?q=1%2C2%2C3%2C5%2C7&amp;sort=&amp;language=english&amp;go=Search">A000041</a>。</p>
<p>阿嘞！全是英文，想我这种初二的蒟蒻如何看得懂？</p>
<p>但是，当你仔细地观察后，就会发现长长的解释中有一段名为PROG的版块，其中有一个<s>在本蒟蒻眼里</s>看着是伪代码的东西。</p>
<pre><code class="language-python">def A000041(n):
    if n == 0: return 1
    S = 0; J = n-1; k = 2
    while 0 &lt;= J:
        T = A000041(J)
        S = S+T if is_odd(k//2) else S-T
        J -= k if is_odd(k) else k//2
        k += 1
    return S
</code></pre>
<p><s>Python党大胜利！</s><br>
接下来的工作就相当容易了。我们把代码翻译成c++，然后把取模啊，记忆化搜索等等全部加上去就可以了。</p>
<h2 id="code"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Code</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span></span></span></span></h2>
<pre><code class="language-c++">ll sol(int x){
	if (x==0) return 1;
	if (dp[x]&gt;0) return dp[x];//记忆化
	ll s=0,j=x-1,k=2;
	while(0&lt;=j){
		ll t=sol(j);
		if ((k/2)&amp;1) s=(s+t)%p;
		else s=(s-t+p)%p;
		if (k&amp;1) j-=k;
		else j-=(k/2);
		k++;
	}
	dp[x]=s;//记忆化
	return s;//也没有什么好解释了，纯翻译……
}
</code></pre>
<h3 id="然而">然而！</h3>
<p>我却惊奇的发现第三个样例竟然过不了……</p>
<p>万分无奈的，本蒟蒻有将上面的代码修改成了dp。</p>
<h2 id="ac-code"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>A</mi><mi>C</mi></mrow><annotation encoding="application/x-tex">AC</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span></span> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Code</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span></span></span></span></h2>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;

typedef long long ll;
ll n,p,dp[100010];

int main()
{
	scanf(&quot;%lld%lld&quot;,&amp;n,&amp;p);
	dp[0]=1;
	for(int i=1;i&lt;=n;i++){
		ll j=i-1,k=2;
		while(0&lt;=j){
			if ((k/2)&amp;1) dp[i]=(dp[i]+dp[j])%p;
			else dp[i]=(dp[i]-dp[j]+p)%p;
			if (k&amp;1) j-=k;
			else j-=(k/2);
			k++;
		}//其实除了把x,s,t这些乱七八糟的换了一下，几乎没有什么区别…
	}
	printf(&quot;%lld\n&quot;,dp[n]);
	return 0;
}
</code></pre>
<h3 id="总结">总结：</h3>
<ul>
<li><s>要充分利用网络</s></li>
<li>本题解纯粹供<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>p</mi><mi>j</mi></mrow><annotation encoding="application/x-tex">pj</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.05724em;">j</span></span></span></span>选手娱乐，请各位大佬们自行跳过！</li>
<li>来自蒟蒻的忠告：希望大家在日常做题中不要过多利用此方法<br>
<s>（否则可能被kkk禁掉）</s>……</li>
</ul>
<p>最后，感谢<s>xjd</s>大佬提供的神奇思路</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solution [LuoguP2338] [USACO14JAN]Bessie Slows Down S]]></title>
        <id>https://xky5308222.github.io/post/solution-luogup2338-usaco14janbessie-slows-down-s/</id>
        <link href="https://xky5308222.github.io/post/solution-luogup2338-usaco14janbessie-slows-down-s/">
        </link>
        <updated>2020-02-28T12:37:54.000Z</updated>
        <content type="html"><![CDATA[<h4 id="随机跳题进来看见是蓝题本来想逃结果仔细一看好像是本蒟蒻最喜欢的死模拟">随机跳题进来，看见是蓝题<s>本来想逃</s>，结果仔细一看好像是本蒟蒻最喜欢的死模拟。</h4>
<p>楼上几位dalao思路已经说得相当明确了，建t和d两个vector，用两个指针扫一遍，每次比较当前t和d谁先进行就好了~</p>
<p>本蒟蒻只想对代码的注释补充一下，以防止本蒟蒻从前看注解感人的题解的悲剧重出江湖……</p>
<h2 id="code"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mi>o</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">Code</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">e</span></span></span></span></h2>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;

int t[10010],d[10010];

int main()
{
	int n,ct=0,cd=0;
	scanf(&quot;%d&quot;,&amp;n);
	getchar();
	for(int i=1;i&lt;=n;i++){
		char ch=getchar();
		getchar();
		if (ch=='T') scanf(&quot;%d&quot;,&amp;t[++ct]);
		else scanf(&quot;%d&quot;,&amp;d[++cd]);
		getchar();
	}//getchar“基本”操作（不要问我是怎么知道的，纯靠手调QWQ）
	sort(t+1,t+ct+1);
	sort(d+1,d+cd+1);
	t[ct+1]=INT_MAX,d[cd+1]=INT_MAX;//小细节处理，防止一边已经处理完了另一边跑炸了
	int pt=1,pd=1,v=1;
	double time=0,s=0;
	while((pt&lt;=ct) || (pd&lt;=cd)){
		double v1=1.0/v;//计算速度
		double st=(t[pt]*1.0-time)*v1+s,sd=d[pd];//注意这里计算的是**从出发点**到该时间段所在位置的距离
		if (st&lt;sd) time=t[pt],pt++,s=st;//这里就不要用s/v了，猜测可能精度会出锅
		else time+=(sd-s)/v1,pd++,s=sd;
		v++;
	}
	time+=(1000-s)/(1.0/(1.0*v));//把最后的路走完，注意double的处理
	int ans=(int)(time+0.5);//别忘了四舍五入
	printf(&quot;%d\n&quot;,ans);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Heap Template]]></title>
        <id>https://xky5308222.github.io/post/heap-template/</id>
        <link href="https://xky5308222.github.io/post/heap-template/">
        </link>
        <updated>2020-02-28T06:12:02.000Z</updated>
        <content type="html"><![CDATA[<p><s>其实好像也没什么模版</s><br>
STL版</p>
<pre><code class="language-c++">priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;//小根堆
priority_queue&lt;int,vector&lt;int&gt; &gt; q;//大根堆

struct cmp{
    bool operator()(const int a,const int b) const{
        return a % 10&gt;b % 10;
    }
};

priority_queue&lt; int , vector &lt; int &gt; , cmp &gt; Q;//自定义的堆
</code></pre>
<p>标准版（<s>实在不好意思再写c++，给P党放个福利</s>）</p>
<pre><code class="language-pascal">procedure put(x:longint);//插入元素
  var fa,son,tmp:longint;
  begin
    len:=len+1;
    heap[len]:=x;
    son:=len;
    while (son&lt;&gt;1) and (heap[son div 2]&gt;heap[son]) do
    begin
      temp:=heap[son div 2];
      heap[son div 2]:=heap[son];
      heap[son]:=temp;
      son:=son div 2;
    end;
  end;

function get:longint;//取出堆顶
  var pa,son,tmp:longint;
  begin
    get:=heap[1]; 
    heap[1]:=heap[len]; 
    len:=len-1;
    pa:=1;
    while pa*2&lt;=len do
    begin
      if (pa*2+1&gt;len) or (heap[pa*2]&lt;heap[pa*2+1]) then son:=pa*2
      else son:=pa*2+1;
      if heap[pa]&gt;heap[son]then
      begin
        tmp:=heap[pa]; 
        heap[pa]:=heap[son];
        heap[son]:=tmp;
        pa:=son;
      end
      else break;
    end;
  end;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[LCA Template]]></title>
        <id>https://xky5308222.github.io/post/lca-template/</id>
        <link href="https://xky5308222.github.io/post/lca-template/">
        </link>
        <updated>2020-02-28T05:52:37.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;cstring&gt;
#include &lt;algorithm&gt;
using namespace std;
struct zzz {
    int t, nex;
}e[500010 &lt;&lt; 1]; int head[500010], tot;
void add(int x, int y) {
    e[++tot].t = y;
    e[tot].nex = head[x];
    head[x] = tot;
}
int depth[500001], fa[500001][22], lg[500001];
void dfs(int now, int fath) {//now表示当前节点，fath表示它的父亲节点
    fa[now][0] = fath; depth[now] = depth[fath] + 1;
    for(int i = 1; i &lt;= lg[depth[now]]; ++i)
        fa[now][i] = fa[fa[now][i-1]][i-1];//意思是now的2^i祖先等于now的2^(i-1)祖先的2^(i-1)祖先
    for(int i = head[now]; i; i = e[i].nex)
        if(e[i].t != fath) dfs(e[i].t, now);
}
int LCA(int x, int y) {
    if(depth[x] &lt; depth[y]) swap(x, y);//用数学语言来说就是：不妨设x的深度 &gt;= y的深度
    while(depth[x] &gt; depth[y])
        x = fa[x][lg[depth[x]-depth[y]] - 1];//先跳到同一深度
    if(x == y) return x;//如果x是y的祖先，那他们的LCA肯定就是x了
    for(int k = lg[depth[x]] - 1; k &gt;= 0; --k)//不断向上跳（lg就是之前说的常数优化）
        if(fa[x][k] != fa[y][k])//因为我们要跳到它们LCA的下面一层，所以它们肯定不相等，如果不相等就跳过
            x = fa[x][k], y = fa[y][k];
    return fa[x][0];
}
int main() {
    int n, m, s; scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;s);
    for(int i = 1; i &lt;= n-1; ++i) {
        int x, y; scanf(&quot;%d%d&quot;, &amp;x, &amp;y);
        add(x, y); add(y, x);
    }
    for(int i = 1; i &lt;= n; ++i)
        lg[i] = lg[i-1] + (1 &lt;&lt; lg[i-1] == i);//求logn 
    dfs(s, 0);
    for(int i = 1; i &lt;= m; ++i) {
        int x, y; scanf(&quot;%d%d&quot;,&amp;x, &amp;y);
        printf(&quot;%d\n&quot;, LCA(x, y));
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solution [LuoguP1141] 01迷宫]]></title>
        <id>https://xky5308222.github.io/post/solution-luogup1141-01-mi-gong/</id>
        <link href="https://xky5308222.github.io/post/solution-luogup1141-01-mi-gong/">
        </link>
        <updated>2020-02-28T01:50:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="其实这道题目的思想就是bfs有些困难的是数据太大不能裸搜">其实这道题目的思想就是bfs，有些困难的是数据太大，不能裸搜</h3>
<h3 id="因为当x1y1和x2y2是连通的时候它们的答案必定相等">因为当（x1,y1）和（x2,y2）是连通的时候，它们的答案必定相等</h3>
<h3 id="所以我们就将搜到的点的答案都记录下来到时候直接拿出来用就可以了">所以我们就将搜到的点的答案都记录下来，到时候直接拿出来用就可以了！</h3>
<p>代码（pascal）</p>
<pre><code class="language-pascal">const dx:array[1..4] of longint=(0,1,0,-1);
      dy:array[1..4] of longint=(1,0,-1,0);
var n,m,xx,yy,i,j:longint;
    ans,a:array[0..1001,0..1001] of longint;
    f:array[0..1001,0..1001] of boolean;
    b:array[0..1000001] of record x,y:longint; end;
    k:char;

procedure bfs(x1,y1:longint);
  var h,t,i,t1,t2:longint;
  begin
    h:=0;t:=1;
    b[1].x:=x1;
    b[1].y:=y1;//本人的程序刚开始前面加了fillchar就TLE……
    f[x1][y1]:=true;
    while(h&lt;t)do
    begin
      inc(h);
      for i:=1 to 4 do
      begin
        t1:=b[h].x+dx[i];
        t2:=b[h].y+dy[i];
        if (t1&lt;1) or (t1&gt;n) or (t2&lt;1) or (t2&gt;n) then continue;
        if (not f[t1][t2]) and (1-a[b[h].x][b[h].y]=a[t1][t2]) then
        begin
          inc(t);
          b[t].x:=t1;
          b[t].y:=t2;
          f[t1][t2]:=true;
        end;
      end;
    end;
    for i:=1 to t do ans[b[i].x][b[i].y]:=t;//将已经走过的点的答案保存下来
  end;

begin
  readln(n,m);
  for i:=1 to n do
  begin
    for j:=1 to n do
    begin
      read(k);
      a[i][j]:=ord(k)-48;
    end;
    readln;
  end;
  fillchar(ans,sizeof(ans),255);
  for i:=1 to n do//先全部扫一遍
    for j:=1 to n do
      if not f[i][j] then bfs(i,j);
  for i:=1 to m do
  begin
    readln(xx,yy);
    writeln(ans[xx][yy]);
  end;
end.
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solution [LuoguP1736] 创意吃鱼法]]></title>
        <id>https://xky5308222.github.io/post/solution-luogup1736-chuang-yi-chi-yu-fa/</id>
        <link href="https://xky5308222.github.io/post/solution-luogup1736-chuang-yi-chi-yu-fa/">
        </link>
        <updated>2020-02-28T01:47:05.000Z</updated>
        <content type="html"><![CDATA[<h4 id="本蒟蒻第一次ac此难度的题"><s>本蒟蒻第一次AC此难度的题……</s></h4>
<p>给大家介绍的算法<s>相对前排大佬</s>，明显低效的多，时间复杂度O（n^2logn）有兴趣的OIER们可以看看，不喜勿喷！</p>
<h2 id="主要思路dp二分">主要思路：dp+二分</h2>
<h4 id="dp的基本思路还是比较简单的">dp的基本思路还是比较简单的：</h4>
<p>f[i][j]表示以i,j为右下角最多吃到的鱼</p>
<p>f1[i][j]表示以i,j为左下角最多吃到的鱼</p>
<p><s>那么显然：</s></p>
<pre><code class="language-c++">f[i][j]=f[i-1][j-1]+1;
f1[i][j]=f1[i-1][j+1]+1;
</code></pre>
<h3 id="但是">但是！</h3>
<ul>
<li>如果某个正方形子矩阵的某条对角线上都有鱼，<strong>且此正方形子矩阵的其他地方无鱼</strong>，猫猫就可以从这个正方形子矩阵“对角线的一端”下口！</li>
</ul>
<p>这该怎么判断呢？？！</p>
<p>本人第一时间，想到了二维前缀和：</p>
<pre><code class="language-c++">s[i][j]=s[i][j-1]+s[i-1][j]-s[i-1][j-1]+a[i][j];
</code></pre>
<p>那么，只要我们在转移之前，判断：<strong>如果该矩阵的所有数的和等于这条对角线的长度，就转移；否则，赋值为1。</strong></p>
<p>本蒟<s>非常happy，信心十足地</s>上交了，80……</p>
<p>不断调试中，发现了问题！<br>
例如这个矩阵：</p>
<p>1 0 1</p>
<p>0 1 0</p>
<p>1 0 0</p>
<p>我们做的时候，显然dp[1][1]=1;dp[1][3]=1;dp[2][2]=2;</p>
<p>但是当dp[3][1]转移的时候，因为dp[2][2]+1,即边长为3的矩阵里有其他的1，所以将不会更新，默认为1!</p>
<h3 id="所以开始二分">所以！开始二分！</h3>
<p>我们二分正方形矩阵的大小，判断是否符合要求，符合就记录下来，不断更新，找到符合要求的最大矩阵。</p>
<p>思路就是这样，代码（c++）</p>
<pre><code class="language-c++">#include &lt;bits/stdc++.h&gt;
using namespace std;

int a[2510][2510],f[2510][2510],f1[2510][2510],s[2510][2510];

int check(int x,int y,int xx,int yy,int f){
	int l=x,r=y,ans=0;
	while(l&lt;=r){
		int mid=(l+r)/2;
		int i=xx,j=yy;
		if (f==1) j+=mid-1;//如果是左下角判断，强制更改为右下角，计算方便
		int sum=s[i][j]-s[i-mid][j]-s[i][j-mid]+s[i-mid][j-mid];
		if (sum==mid){
			l=mid+1;
			ans=mid;
		}
		else r=mid-1;//二分判断
	}
	return ans;
}

int main()
{
//	freopen(&quot;fish.in&quot;,&quot;r&quot;,stdin);
//	freopen(&quot;fish.out&quot;,&quot;w&quot;,stdout);
	int n,m;
	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
	for(int i=1;i&lt;=n;i++)
	    for(int j=1;j&lt;=m;j++){
    	    scanf(&quot;%d&quot;,&amp;a[i][j]);
    	    s[i][j]=s[i-1][j]+s[i][j-1]-s[i-1][j-1]+a[i][j];//前缀和，之前已经介绍过了
		}
    for(int i=1;i&lt;=n;i++)
        for(int j=1;j&lt;=m;j++)
 		    if (a[i][j]==1){
 		    	f[i][j]=1;
		        f1[i][j]=1;
 		    	if (a[i-1][j-1]==1) {//右下角判断
 		    		int tt=f[i-1][j-1]+1;
					int t=check(1,tt,i,j,0);
 		    		f[i][j]=max(f[i][j],t);
				 }
 		    	if (a[i-1][j+1]==1) {//左下角判断
 		    		int tt=f1[i-1][j+1]+1;
 		    		int t=check(1,tt,i,j,1);
 		    		f1[i][j]=max(f1[i][j],t);
				 } 
			 }
    int ans=0;
    for(int i=1;i&lt;=n;i++)
        for(int j=1;j&lt;=m;j++)
            ans=max(ans,max(f[i][j],f1[i][j]));
    printf(&quot;%d\n&quot;,ans);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Solution [LuoguP5018] 对称二叉树]]></title>
        <id>https://xky5308222.github.io/post/solution-luogup5018-dui-cheng-er-cha-shu/</id>
        <link href="https://xky5308222.github.io/post/solution-luogup5018-dui-cheng-er-cha-shu/">
        </link>
        <updated>2020-02-28T01:42:43.000Z</updated>
        <content type="html"><![CDATA[<p>考场上被T3dp虐成狗，看到T4的对称什么奇奇怪怪的玩意瞬间心都在飞扬……</p>
<p>结果打了个错的大暴力只过了1个点我谔谔……</p>
<p>看到某几位直接输出3就得了32分的神仙我默默流泪……</p>
<h2 id="进入正题">进入正题</h2>
<p>古人说马上、厕上、枕上容易出灵感</p>
<p>回到家经过一番冷静，本蒟蒻<s>看似貌不经心地上个厕所</s>却神奇地有了一些思路</p>
<h3 id="关键如何判断一棵树为对称二叉树">关键：如何判断一棵树为对称二叉树？</h3>
<p>我们采用递归的方法：<br>
如果一棵树的左子树的左子树和它的右子树的右子树“对称”，并且它的左子树的右子树和它的右子树的左子树“对称”，就符合判断的条件。（逃~）</p>
<h3 id="用正常的话来说就是">用正常的话来说就是：</h3>
<pre><code class="language-pascal">function check(x,y:longint):boolean;
  begin
    if (x=-1) and (y=-1) then exit(true);//两个空节点
    if v[x]&lt;&gt;v[y] then exit(false)
    else
    begin
      if (l[x]=-1) and (r[x]=-1) and (l[y]=-1) and (r[y]=-1) then
        exit(true);//两个子节点
      if check(l[x],r[y]) and check(r[x],l[y]) then exit(true);
      exit(false);
    end;
  end;
</code></pre>
<p>同时，我们先预处理好找到这棵树的根节点，并且在搜索上我采用bfs的方式。当一个节点被搜索完了以后，就将它的非空子节点放入队列中。</p>
<p>就这样，我们就已经写出了一个看似是暴力的正解</p>
<p>至于复杂度吗，本人经过<s>1000000000 % 10</s>min的计算也没有得出结果，还清大佬在评论区留言（<s>暂且认为是个玄学复杂度</s>）。</p>
<h2 id="code">Code</h2>
<pre><code class="language-pascal">var v,l,r,s,a:array[-1..1000001] of longint;
    find,n,i,max:longint;

function p:longint;//没有爸爸的就是老祖宗丫丫
  var i:longint;
  begin
    for i:=1 to n do if s[i]=0 then exit(i);
  end;

function check(x,y:longint):boolean;
  begin
    if (x=-1) and (y=-1) then exit(true);
    if v[x]&lt;&gt;v[y] then exit(false)
    else
    begin
      if (l[x]=-1) and (r[x]=-1) and (l[y]=-1) and (r[y]=-1) then
        exit(true);
      if check(l[x],r[y]) and check(r[x],l[y]) then exit(true);
      exit(false);
    end;
  end;

function sc(t:longint):longint;
  var ss:longint;
  begin
    if (l[t]=-1) and (r[t]=-1) then exit(1)
    else
    begin
      ss:=1;
      if (l[t]&lt;&gt;-1) then ss:=ss+sc(l[t]);
      if (r[t]&lt;&gt;-1) then ss:=ss+sc(r[t]);
      exit(ss);
    end;
  end;//相当好理解的统计节点个数

procedure bfs(k:longint);
  var h,t,sk:longint;
  begin
    h:=0;
    t:=1;
    a[t]:=k;
    while(h&lt;t)do//标准bfs模板
    begin
      inc(h);
      if check(l[a[h]],r[a[h]]) then
      begin
        sk:=sc(a[h]);
        if max&lt;sk then max:=sk; 
      end;
      if l[a[h]]&lt;&gt;-1 then
      begin
        inc(t);
        a[t]:=l[a[h]];
      end;
      if r[a[h]]&lt;&gt;-1 then
      begin
        inc(t);
        a[t]:=r[a[h]];
      end;
    end;
  end;

begin
  readln(n);
  for i:=1 to n do read(v[i]);
  for i:=1 to n do
  begin
    readln(l[i],r[i]);
    s[l[i]]:=i;
    s[r[i]]:=i;//找爸爸
  end;
  find:=p;
  bfs(find);
  writeln(max);
end.
</code></pre>
<h3 id="个人认为这道题还是不算难的t4考察的并不是算法的掌握主要是思维方式">个人认为这道题还是不算难的T4，考察的并不是算法的掌握，主要是思维方式。</h3>
]]></content>
    </entry>
</feed>